package com.mp.controller;


import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.beans.Encoder;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.mp.bean.User;
import com.mp.bean.Video;
import com.mp.service.ProjectService;
import com.mp.tools.StringUtils;
import com.mp.tools.UserDao;

@Controller
public class ProjectController {
	
	
  @Autowired
  private ProjectService projectService;
  
  
  @RequestMapping(value="/init")
  public String init(Model model){
	  model.addAttribute("picture", "test");

	  return "index.jsp";
  }
  @RequestMapping(value="/upload")
  public String upload(@RequestParam("file") CommonsMultipartFile file){
	  
	  File newFile=new File("D:/项目");
	  try {
		file.transferTo(newFile);
	} catch (IllegalStateException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  return null;
  }
  
  @RequestMapping(value="loadVideo/{videoName}")
  public String loadVideo(@PathVariable("videoName") String name,Model model) {
	  System.out.println(name);
	  Video video=projectService.getVideoByName(name);
	
	 String str= video.getName();
	 str=str.substring(0, str.lastIndexOf("."));
	 video.setName(str);
	  model.addAttribute("video", video);
	  return "video.jsp";
	 
  }
  @RequestMapping(value="/register")
  public void register(HttpServletRequest req,HttpServletResponse resp) throws Exception{
  	  	String uuid = UUID.randomUUID().toString();
  		String email = req.getParameter("email");
  		String password = req.getParameter("password");
  		String name = req.getParameter("nickname");
  		
  		UserDao dao = new UserDao();
  		boolean flag = false;
  		
  		System.out.println("ok");
  		User ui = new User(uuid,email,password,1,name,null);
  			try {
  				flag = dao.addUser(ui);
  			} catch (Exception e) {
  				// TODO Auto-generated catch block
  				e.printStackTrace();
  			}
  		
  		if(flag){  
  			resp.sendRedirect("/movieProject/index.jsp");
  			
  		}else{  
  			System.out.println("ok");
  		}
  	}
  @RequestMapping(value="/randomCode")
  public void randomCode(HttpServletRequest req,HttpServletResponse resp) throws Exception{
		//生成随机数
		String randomCode = UUID.randomUUID().toString().substring(0, 5);

		//把随机数放进Session中
		req.getSession().setAttribute("RANDOMCODE_IN_SESSION", randomCode);

		//创建图片对象
		int width = 80;
		int height = 40;
		int imageType = BufferedImage.TYPE_INT_RGB;
		BufferedImage image = new BufferedImage(width, height, imageType);

		//画板
		Graphics g = image.getGraphics();
		g.setColor(Color.YELLOW);
		//绘制一个实心的矩形
		g.fillRect(1, 1, width - 2, height - 2);

		//把随机数画进图片中
		g.setColor(Color.BLACK);//设置随机数的颜色
		Font font = new Font("宋体", Font.BOLD + Font.ITALIC, 20);
		g.setFont(font);//设置随机数的字体和大小
		g.drawString(randomCode, 10, 28);
		//干扰线
		g.setColor(Color.GRAY);
		Random r = new Random();
		for (int i = 0; i < 100; i++) {
			g.fillRect(r.nextInt(width), r.nextInt(height), 2, 2);
		}

		//关闭
		g.dispose();
		//把图片对象以流的方式保存出去
		ImageIO.write(image, "jpg", resp.getOutputStream());
  }
  
  @RequestMapping(value="/login")
  public void login(HttpServletRequest req,HttpServletResponse resp) throws Exception{
  	  	UserDao dao = new UserDao();
  		String randomCode = req.getParameter("randomCode");
  		String email = req.getParameter("email");
  		String password = req.getParameter("password");
  		
  		//获取session中的验证码
  		String sessionRandomCode = (String)req.getSession().getAttribute("RANDOMCODE_IN_SESSION");
  		System.out.println(sessionRandomCode);
  		resp.setContentType("text/html; charset=utf-8");
  		PrintWriter out = resp.getWriter();
  		User ui;
  		try {
  			ui = dao.checkLogin(email, password);
  			System.out.println(ui);
  			if(!StringUtils.hasLength(randomCode) || !StringUtils.hasLength(sessionRandomCode) ||!randomCode.equals(sessionRandomCode)){
  				System.out.println(randomCode);
  				out.write("验证码错误");
  				return;
  			}
  			if(ui==null){
  				
  					out.write("邮箱或密码错误"); 
  					return;
  				}else{
  				out.write("登录成功");
  				req.getSession().setAttribute("USER_IN_SESSION", ui);
  				}
  		} catch (Exception e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();
  		}
  	}
  
}
