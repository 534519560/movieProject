package com.mp.controller;


import it.sauronsoftware.jave.EncoderException;
import it.sauronsoftware.jave.InputFormatException;
import it.sauronsoftware.jave.MultimediaInfo;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.beans.Encoder;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import com.alipay.api.domain.AlipayTradeQueryModel;
import com.alipay.api.internal.util.AlipaySignature;
import com.alipay.api.request.AlipayTradeQueryRequest;
import com.alipay.api.response.AlipayTradeQueryResponse;
import com.alipay.config.AlipayConfig;
import com.mp.bean.CommentCount;
import com.mp.bean.User;
import com.mp.bean.Video;
import com.mp.service.ProjectService;
import com.mp.tools.FFmpeg;
import com.mp.tools.FileUploadInfo;
import com.mp.tools.FileUploadUtil;
import com.mp.tools.PageResult;
import com.mp.tools.ProductQueryObject;
import com.mp.tools.StringUtils;
import com.mp.tools.TempData;
import com.mp.tools.UserDao;
import com.mp.tools.VideoCommentDao;
import com.mp.tools.VideoInfoDao;


@Controller
public class ProjectController {
	
	
  @Autowired
  private ProjectService projectService;
  
  
  @RequestMapping(value="/init")
  public String init(Model model){


	  return "index.jsp";
  }
  @RequestMapping(value="/upload")
  public String upload(@RequestParam("file") CommonsMultipartFile file){
	  
	  File newFile=new File("D:/项目");
	  try {
		file.transferTo(newFile);
	} catch (IllegalStateException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  return null;
  }
  
  @RequestMapping(value="loadVideo/{videoName}")
  public String loadVideo(@PathVariable("videoName") String name,Model model) {
	  System.out.println(name);
	  Video video=projectService.getVideoByName(name);
	
	 String str= video.getName();
	 str=str.substring(0, str.lastIndexOf("."));
	 video.setName(str);
	  model.addAttribute("video", video);
	  return "video.jsp";
	 
  }
  @RequestMapping(value="/checkreg")
  @ResponseBody
  public String checkregister(HttpServletRequest req) throws Exception{
	  	String email = req.getParameter("email");
	  	UserDao dao = new UserDao();
		User ui;
			ui = dao.query(email);
			if(ui!=null){
				
				return "邮箱已注册";
			}
	
		return "可以注册";
  }
  @RequestMapping(value="/register")
  public String register(HttpServletRequest req,HttpServletResponse resp) throws Exception{
  	  	String uuid = UUID.randomUUID().toString();
  		String email = req.getParameter("email");
  		String password = req.getParameter("password");
  		String name = req.getParameter("nickname");
  		
  		UserDao dao = new UserDao();
  		boolean flag = false;
  		
  		System.out.println("ok");
  	
  			try {
  
					User ui = new User(uuid,email,password,1,name,"");
  				flag = dao.addUser(ui);
  			} catch (Exception e) {
  				// TODO Auto-generated catch block
  				e.printStackTrace();
  			}
  		
  		if(flag){  
  			return"redirect:/index.jsp";
  			
  			
  		}else{  
  			System.out.println("ok");
  		}
		return "redirect:/Register.jsp";
  	}
  @RequestMapping(value="/randomCode")
  public void randomCode(HttpServletRequest req,HttpServletResponse resp) throws Exception{
		//生成随机数
		String randomCode = UUID.randomUUID().toString().substring(0, 5);
System.out.println(randomCode);
		//把随机数放进Session中
		req.getSession().setAttribute("RANDOMCODE_IN_SESSION", randomCode);

		//创建图片对象
		int width = 80;
		int height = 40;
		int imageType = BufferedImage.TYPE_INT_RGB;
		BufferedImage image = new BufferedImage(width, height, imageType);

		//画板
		Graphics g = image.getGraphics();
		g.setColor(Color.YELLOW);
		//绘制一个实心的矩形
		g.fillRect(1, 1, width - 2, height - 2);

		//把随机数画进图片中
		g.setColor(Color.BLACK);//设置随机数的颜色
		Font font = new Font("宋体", Font.BOLD + Font.ITALIC, 20);
		g.setFont(font);//设置随机数的字体和大小
		g.drawString(randomCode, 10, 28);
		//干扰线
		g.setColor(Color.GRAY);
		Random r = new Random();
		for (int i = 0; i < 100; i++) {
			g.fillRect(r.nextInt(width), r.nextInt(height), 2, 2);
		}

		//关闭
		g.dispose();
		//把图片对象以流的方式保存出去
		ImageIO.write(image, "jpg", resp.getOutputStream());
  }
  @RequestMapping(value="/checkyzm")
  @ResponseBody
  public String checkyzm(HttpSession session,@RequestParam String randomCode) {
	 String sessionRandomCode= (String) session.getAttribute("RANDOMCODE_IN_SESSION");
	 

	  if(!StringUtils.hasLength(randomCode) || !StringUtils.hasLength(sessionRandomCode) ||!randomCode.equals(sessionRandomCode)){
		
		return "验证码错误";
			
		}
	
	  return "验证码正确";
  }
  @RequestMapping(value="/Login")
  public String login(@RequestParam("email")String email,@RequestParam("password") String password,HttpSession session) throws Exception{
  	  	UserDao dao = new UserDao();
		System.out.println(email+"\n"+password);
		User ui = dao.checkLogin(email,password);

		if (ui == null) {

		session.setAttribute("errorMessage", "帐号或者密码错误");
			return "redirect:/Login.jsp";

		} else {

			session.setAttribute("user", ui);

		}

		return "redirect:/index.jsp";
  	}
 @RequestMapping(value="/pay")
  public String pay() {
	  return "pay/index.jsp";
  }
  @RequestMapping(value="/payState")
  @ResponseBody
  public String paySuccess(HttpServletRequest request,@RequestParam("out_trade_no")String out_trade_no
  ,@RequestParam("trade_no")String trade_no,@RequestParam("trade_status")String trade_status
		  ) throws AlipayApiException, UnsupportedEncodingException {
	  Map<String,String> params = new HashMap<String,String>();
		Map<String,String[]> requestParams = request.getParameterMap();
		for (Iterator<String> iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";
			}
			//乱码解决，这段代码在出现乱码时使用
	
			params.put(name, valueStr);
		}
		
		boolean signVerified = AlipaySignature.rsaCheckV1(params, AlipayConfig.alipay_public_key, AlipayConfig.charset, AlipayConfig.sign_type); //调用SDK验证签名
		if(signVerified) {//验证成功
			//商户订单号 out_trade_no
			
		
			//支付宝交易号 trade_no
		
		
			//交易状态 trade_status
			
			
			if(trade_status.equals("TRADE_FINISHED")){
				//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//如果有做过处理，不执行商户的业务程序
					
				//注意：
				//退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
			}else if (trade_status.equals("TRADE_SUCCESS")){
				//判断该笔订单是否在商户网站中已经做过处理
				//如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
				//如果有做过处理，不执行商户的业务程序
				
				//注意：
				//付款完成后，支付宝系统发送该交易状态通知
			}
		 
			System.out.println("success");
	
			return "success";
			
		}else {//验证失败

			return "fail";
		
			//调试用，写文本函数记录程序运行情况是否正常
			//String sWord = AlipaySignature.getSignCheckContentV1(params);
			//AlipayConfig.logResult(sWord);
		}
  }
  @RequestMapping(value="/payResult")
  public String payResult(HttpServletRequest request,@RequestParam("out_trade_no")String out_trade_no
		  ,@RequestParam("trade_no")String trade_no) throws AlipayApiException {
	  Map<String,String> params = new HashMap<String,String>();
		Map<String,String[]> requestParams = request.getParameterMap();
		for (Iterator<String> iter = requestParams.keySet().iterator(); iter.hasNext();) {
			String name = (String) iter.next();
			String[] values = (String[]) requestParams.get(name);
			String valueStr = "";
			for (int i = 0; i < values.length; i++) {
				valueStr = (i == values.length - 1) ? valueStr + values[i]
						: valueStr + values[i] + ",";
			}
			//乱码解决，这段代码在出现乱码时使用
			//valueStr = new String(valueStr.getBytes("ISO-8859-1"), "utf-8");
			params.put(name, valueStr);
		}
		
		boolean signVerified = AlipaySignature.rsaCheckV1(params, AlipayConfig.alipay_public_key, AlipayConfig.charset, AlipayConfig.sign_type); //调用SDK验证签名
		
		//——请在这里编写您的程序（以下代码仅作参考）——
		if(signVerified) {
			
			request.getSession().setAttribute("message", "支付成功");
			
			return "redirect:/index.jsp";
		}else {
			request.getSession().setAttribute("message", "支付失败");
			return "redirect:/index.jsp";
		}
	  
  }
  @RequestMapping(value="/gotoPay")
  public String gotoPay() {
	  return "pay/alipay.trade.page.pay.jsp";
  }
  @RequestMapping(value="/queryvideo")
  public void QueryVideoByAdminServlet(HttpServletRequest req, HttpServletResponse resp){
	  Integer videopass =-1;//check标志
		try {
			req.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		String currentpageStr = req.getParameter("currentpage");
		String keyword = req.getParameter("keyword");
		String videopassStr = req.getParameter("videopass");
		VideoInfoDao vdao = new VideoInfoDao();
		VideoCommentDao cdao = new VideoCommentDao();
		ProductQueryObject op = new ProductQueryObject();
		op.setName(keyword);
		op.setIntroduction(keyword);
		
		try {
			if(StringUtils.hasLength(currentpageStr)){
				Integer currentpage = Integer.valueOf(currentpageStr);
				op.setCurrentpage(currentpage);
				
			}
			if(StringUtils.hasLength(videopassStr)){
				 videopass = Integer.valueOf(videopassStr);
				
			}
			op.setChecked(videopass);
			
			PageResult queryVideoList = vdao.queryVideoList(op);
			List<Video> listdata = queryVideoList.getListdata();
			List<CommentCount> l=new ArrayList<CommentCount>();
		    for (Video video : listdata) {
				String uuid = video.getUuid();
				
				CommentCount qv = cdao.totalVideoCommentCount(uuid);
		    	l.add(qv);
			}
			req.setAttribute("serchkeyword", keyword);
			req.setAttribute("queryVideoList", queryVideoList);
			System.out.println(l);
			req.setAttribute("commentlist", l);

			req.getRequestDispatcher("/VideoSerchByAdmin.jsp").forward(req, resp);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
  @RequestMapping(value="/updatevideobyadmin")
  public void UpdateVideoCheckedByadminServlet(HttpServletRequest req, HttpServletResponse resp){
	  
	      try {
			req.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		Integer checked=0;
		String videouuid = req.getParameter("videouuid");
		String checkedStr = req.getParameter("checked");
		VideoInfoDao vid=new VideoInfoDao();
		if(StringUtils.hasLength(checkedStr)){
			 checked = Integer.valueOf(checkedStr);
			
		}
		if(vid.updateVideoChecked(videouuid, checked)){
			try {
				resp.getWriter().print(checked);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	  
	  
  }
  @RequestMapping(value="/addvideobyadmin")
  public void AddVideoByadmin(HttpServletRequest req, HttpServletResponse resp){
	    try {
			req.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    String videotitle = req.getParameter("videotitle");
	    String videotype = req.getParameter("videotype");
	    String videodescript = req.getParameter("videodescript");
	    
	    String ffpemg = req.getServletContext().getRealPath("/res/ffmpeg.exe");
	    String picturepath = req.getServletContext().getRealPath("/picture/");
	    ffpemg.replaceAll("\\\\","/");
	    Video video = new Video();
	    try {
	    	it.sauronsoftware.jave.Encoder encoder = new it.sauronsoftware.jave.Encoder();
	        it.sauronsoftware.jave.MultimediaInfo  info;
		
			info = encoder.getInfo(TempData.filepath);
			long duration = info.getDuration();
			int lastIndexOf = TempData.filename.lastIndexOf(".");
			 String filename = TempData.filename.substring(0, lastIndexOf);
	    	String time =duration/(3600*1000) + ":" + duration%(3600*1000)/(60*1000) + ":" + duration%(3600*1000)%(60*1000)/1000;
	    	FFmpeg.Capture(ffpemg,TempData.filepath.getAbsolutePath(),"15","1",picturepath+"\\"+filename); 
	     
	    	video.setUuid(TempData.uuidfromsave.toString());
	    	video.setName(videotitle);
	    	video.setAddress(TempData.filepath.getAbsolutePath());
	    	video.setDuration(time);
	        video.setType(videotype);
	        video.setUploadTime(new SimpleDateFormat("yyyy-MM-ss hh:mm:ss").format(new Date()));
	        video.setUploadUser("admin");
	        video.setIntroduction(videodescript);
	        video.setVideopicture("picture/"+filename+".jpg");
	       
		    VideoInfoDao vid=new VideoInfoDao();
		    boolean flag = vid.addVideoByAdmin(video);
		} catch (InputFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (EncoderException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	  
	  
  }
  @RequestMapping(value="/deletevideobyadmin")
  public void DeleteVideoByAdminServlet(HttpServletRequest req, HttpServletResponse resp){
	  String videouuid = req.getParameter("videouuid");
	    VideoInfoDao vid=new VideoInfoDao();
	    System.out.println("videouuid");
	    if(vid.deleteVideoInfo(videouuid)){
	    	Video video = vid.queryVideoAddress(videouuid);
	    	
	    	File videoaddress = new File(video.getAddress());
	    	  if(videoaddress.delete()){
	    		  try {
					resp.getWriter().print(true);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    		  
	    	  }
	    	
	    }
	  
	  
  }
  
  @RequestMapping(value="/adminremovevideo")
  
  public void RemoveVideoByAdminServlet(HttpServletRequest req, HttpServletResponse resp){
	  File filepath=TempData.filepath;
		try {
			resp.getWriter().print(filepath.delete());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 
  }
  

  @RequestMapping(value="/UploadFileProgressServlet")
  public void UploadFileProgressServlet(HttpServletRequest request, HttpServletResponse response) throws Exception{

      String responseContent = "";  
        
      Object obj = request.getSession().getAttribute("uploadInfo");  
      if(obj == null){  
          responseContent = "{'data':'NoData'}";  
      }else{  
          FileUploadInfo uploadInfo = (FileUploadInfo)obj;  
         
          responseContent = uploadInfo.toString();  
          if(uploadInfo.getUploadPercent()== 100.0){  
              request.getSession().setAttribute("uploadInfo", null);  
          }  
      }  
      System.out.println("文件上传情况："+responseContent);  
      response.getWriter().print(responseContent);  
  }
  
  @RequestMapping(value="/UploadFileServlet")
public void UploadFileServlet (HttpServletRequest request, HttpServletResponse response) {  
	 
	  
	  
	            
	   
	            long start = System.currentTimeMillis();  
	            System.out.println("开始上传文件........." );  
	            try {
					FileUploadUtil.upload(request);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
	            System.out.println("文件上传完成........." );  
	            System.out.println("文件用时:"+(System.currentTimeMillis()-start)+"毫秒");
	          
	    
	     
	      
	    }  
  
  
}
